# HTTPS Server
server {
    listen 443 ssl default_server;
    listen [::]:443 ssl default_server;
    server_name _;

    ssl_certificate /code/pikatrading/ssl/pikatrading.crt;
    ssl_certificate_key /code/pikatrading/ssl/pikatrading.key;
    
    # SSL configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;
    
    # HSTS
    add_header Strict-Transport-Security "max-age=63072000" always;
    
    client_max_body_size 4G;

    location /static/ {
        alias /code/pikatrading/static/;
        access_log off;
        expires 30d;
    }

    location /media/ {
        alias /code/pikatrading/media/;
        access_log off;
        expires 30d;
    }

    location / {
        include uwsgi_params;
        uwsgi_pass unix:///code/run/uwsgi.sock;
        
        # Standard proxy headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Timeouts
        proxy_connect_timeout 300s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;
    }
}

# HTTP Server - Redirect to HTTPS except for health check
server {
    listen 80 default_server;
    listen [::]:80 default_server ipv6only=on;
    server_name _;

    # Debug logging
    error_log /var/log/nginx/error.log debug;
    access_log /var/log/nginx/access.log combined buffer=512k flush=1s;

    # Health check endpoint - keep accessible on HTTP
    location = /health {
        access_log off;
        add_header Content-Type text/plain;
        return 200 'healthy\n';
    }

    # Redirect all other traffic to HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}